Creating & Using & Modifying & Removing the Packages (Code Samples)
--------------------------------------------------------------------------------------------------------------------
--------------------------------------------CREATING & USING PACKAGES-----------------------------------------------
--------------------------------------------------------------------------------------------------------------------
----------------- Creating first package specification
CREATE OR REPLACE 
PACKAGE EMP AS 
  v_salary_increase_rate number := 0.057; 
  cursor cur_emps is select * from employees;
  
  procedure increase_salaries;
  function get_avg_sal(p_dept_id int) return number;
END EMP;
----------------- Creating the package body
CREATE OR REPLACE
PACKAGE BODY EMP AS
  procedure increase_salaries AS
  BEGIN
    for r1 in cur_emps loop
      update employees_copy set salary = salary + salary * v_salary_increase_rate;
    end loop;
  END increase_salaries;
  function get_avg_sal(p_dept_id int) return number AS
  v_avg_sal number := 0;
  BEGIN
    select avg(salary) into v_avg_sal from employees_copy where
          department_id = p_dept_id;
    RETURN v_avg_sal;
  END get_avg_sal;
END EMP;
----------------- using the subprograms in packages
exec EMP_PKG.increase_salaries;
----------------- using the variables in packages
begin
  dbms_output.put_line(emp_pkg.get_avg_sal(50));
  dbms_output.put_line(emp_pkg.v_salary_increase_rate);
end;



Visibility of Package Objects (Code Samples)
---------------------------------------------------------------------------------------------
--------------------------------VISIBILITY OF VARIABLES IN PACKAGES--------------------------
---------------------------------------------------------------------------------------------
create or replace PACKAGE BODY EMP_PKG AS
  
  v_sal_inc int := 500;
  v_sal_inc2 int := 500;
  
  procedure print_test is
  begin
    dbms_output.put_line('Test : '|| v_sal_inc);
  end;
  
  procedure increase_salaries AS
  BEGIN
    for r1 in cur_emps loop
      update employees_copy set salary = salary + salary * v_salary_increase_rate
      where employee_id = r1.employee_id;
    end loop;
  END increase_salaries;
  function get_avg_sal(p_dept_id int) return number AS
  v_avg_sal number := 0;
  BEGIN
    print_test;
    select avg(salary) into v_avg_sal from employees_copy where
          department_id = p_dept_id;
    RETURN v_avg_sal;
  END get_avg_sal;
  
END EMP_PKG;
----------------- 
create or replace PACKAGE BODY EMP_PKG AS
  
  v_sal_inc int := 500;
  v_sal_inc2 int := 500;
  function get_sal(e_id employees.employee_id%type) return number;
procedure print_test is
  begin
    dbms_output.put_line('Test : '|| v_sal_inc);
    dbms_output.put_line('Test salary : '|| get_sal(102));
  end;
  procedure increase_salaries AS
  BEGIN
    for r1 in cur_emps loop
      update employees_copy set salary = salary + salary * v_salary_increase_rate
      where employee_id = r1.employee_id;
    end loop;
  END increase_salaries;
  function get_avg_sal(p_dept_id int) return number AS
  v_avg_sal number := 0;
  BEGIN
    print_test;
    select avg(salary) into v_avg_sal from employees_copy where
          department_id = p_dept_id;
    RETURN v_avg_sal;
  END get_avg_sal;
  
  function get_sal(e_id employees.employee_id%type) return number is
  v_sal number := 0;
  begin
    select salary into v_sal from employees where employee_id = e_id;
  end;
  
end;



Persistent State of Packages (Code Samples)
---------------------------------------------------------------------------------------------
----------------------------------PERSISTENT STATE OF PACKAGES-------------------------------
--------------------------------------------------------------------------------------------- 
----------------- 
execute dbms_output.put_line(constants_pkg.v_salary_increase);
grant execute on constants_pkg to my_user;
revoke execute on constants_pkg from my_user;
----------------- 
----------------- 
begin
  constants_pkg.v_company_name := 'ACME';
  dbms_output.put_line(constants_pkg.v_company_name);
  dbms_lock.sleep(20); 
end;
exec dbms_output.put_line(constants_pkg.v_company_name);
----------------- 
create or replace package constants_pkg is
PRAGMA SERIALLY_REUSABLE;
  v_salary_increase constant number:= 0.04;
  cursor cur_emps is select * from employees;
  t_emps_type employees%rowtype;
  v_company_name varchar2(20) := 'ORACLE';
end;
----------------- 
begin
  constants_pkg.v_company_name := 'ACME';
  dbms_output.put_line(constants_pkg.v_company_name);
  dbms_lock.sleep(20); 
end;
----------------- 
declare
v_emp employees%rowtype;
begin
 open constants_pkg.cur_emps;
 fetch constants_pkg.cur_emps into v_emp;
 dbms_output.put_line(v_emp.first_name);
 close constants_pkg.cur_emps;
end;
----------------- 
declare
v_emp employees%rowtype;
begin
 fetch constants_pkg.cur_emps into v_emp;
 dbms_output.put_line(v_emp.first_name);
end;




Using Collections in PL/SQL Packages (Code Samples)
/***************** The Complete PL/SQL Bootcamp ********************
 * Author  : Oracle Master Training                                *
 * Course  : The Complete Oracle PL/SQL Bootcamp                   *
 * Lecture : Using Collections in PL/SQL Packages                  *
 *******************************************************************/
CREATE OR REPLACE PACKAGE emp_pkg AS 
  TYPE emp_table_type IS TABLE OF employees%rowtype INDEX BY PLS_INTEGER;
  v_salary_increase_rate NUMBER := 1000; 
  v_min_employee_salary  NUMBER := 5000;
  CURSOR cur_emps IS 
   SELECT * FROM employees;
  
  PROCEDURE increase_salaries;
  FUNCTION  get_avg_sal(p_dept_id int) RETURN NUMBER;
  v_test    INT := 4;
  FUNCTION  get_employees RETURN emp_table_type;
  FUNCTION  get_employees_tobe_incremented RETURN emp_table_type;
  PROCEDURE increase_low_salaries;
  FUNCTION  arrange_for_min_salary(v_emp employees%rowtype) RETURN employees%rowtype;
END EMP_PKG;
/************************** Package Body ***************************/
CREATE OR REPLACE PACKAGE BODY emp_pkg AS
  
  v_sal_inc INT  := 500;
  v_sal_inc2 INT := 500;
  FUNCTION get_sal(e_id employees.employee_id%TYPE) RETURN NUMBER;
  PROCEDURE print_test IS 
  BEGIN
    dbms_output.put_line('Test : '|| v_sal_inc);
    dbms_output.put_line('Tests salary :'|| get_sal(102));
  END;
  
  PROCEDURE increase_salaries AS
  BEGIN
    FOR r1 IN cur_emps LOOP
      UPDATE employees_copy 
      SET    salary = salary + salary * v_salary_increase_rate
      WHERE employee_id = r1.employee_id;
    END LOOP;
  END increase_salaries;
  
  FUNCTION get_avg_sal(p_dept_id int) RETURN NUMBER AS
    v_avg_sal number := 0;
  BEGIN
  print_test;
    SELECT avg(salary) 
    INTO   v_avg_sal 
    FROM   employees_copy 
    WHERE  department_id = p_dept_id;
    RETURN v_avg_sal;
  END get_avg_sal;
  
  FUNCTION get_sal(e_id employees.employee_id%TYPE) RETURN NUMBER IS 
    v_sal number := 0;
  BEGIN
    SELECT salary 
    INTO   v_sal 
    FROM   employees 
    WHERE  employee_id = e_id;
    RETURN v_sal;
  END;
  
  /* This function returns all the employees in employees table */
  FUNCTION get_employees RETURN emp_table_type IS 
    v_emps emp_table_type;
  BEGIN
    FOR cur_emps IN (SELECT * FROM employees_copy) LOOP
      v_emps(cur_emps.employee_id) := cur_emps;
    END LOOP;
    RETURN v_emps;
  end;
  
  /*
    This function returns the employees which are under the minimum salary
    of the company standards and to be incremented by the new minimum salary
  */
  FUNCTION get_employees_tobe_incremented RETURN emp_table_type IS
    v_emps emp_table_type;
    i employees.employee_id%TYPE;
  BEGIN
    v_emps := get_employees;
    i := v_emps.first;
      WHILE i IS NOT NULL LOOP
        IF v_emps(i).salary > v_min_employee_salary THEN
          v_emps.delete(i);
        END IF;
        i := v_emps.next(i);
      END LOOP;
    RETURN v_emps;
  END;
  
  /*
    This procedure increases the salary of the employees 
    who has a less salary then the company standard.
  */
  PROCEDURE increase_low_salaries AS 
    v_emps emp_table_type;
    v_emp employees%rowtype;
    i employees.employee_id%type;
  BEGIN
    v_emps := get_employees_tobe_incremented;
    i := v_emps.first;
    WHILE i is not null loop
      v_emp := arrange_for_min_salary(v_emps(i));
      UPDATE employees_copy 
      SET    row = v_emp    
      WHERE  employee_id = i;
      i := v_emps.next(i);
    END LOOP;
  END increase_low_salaries;
 
  /*
    This function returns the employee by arranging the salary based on the 
    company standard.
  */
  FUNCTION arrange_for_min_salary(v_emp in out employees%rowtype) RETURN employees%rowtype IS 
  BEGIN
    v_emp.salary := v_emp.salary + v_salary_increase_rate;
    IF v_emp.salary < v_min_employee_salary THEN
      v_emp.salary := v_min_employee_salary;
    END IF;
    RETURN v_emp;
  END;
  /***************************************************************/
BEGIN
  v_salary_increase_rate := 500;
  INSERT INTO logs VALUES('EMP_PKG','Package initialized!',sysdate);
END emp_pkg;



Granting Debug Privileges to a User
/****************** The Complete PL/SQL Bootcamp *******************
 * Author  : Oracle Master Training                                *
 * Course  : The Complete Oracle PL/SQL Bootcamp                   *
 * Lecture : Granting Debug Privileges to a User                   *
 *******************************************************************/
 
/************************* Instructions: ****************************
1)You need to connect as the "SYS" or "SYSTEM" user, 
2)Execute the following codes to be able to debug your PL/SQL codes & subprograms.
3)You can grant debug privileges to another user by replacing HR within the following codes if you need to.
 *******************************************************************/
 
GRANT DEBUG CONNECT SESSION TO hr;
GRANT DEBUG ANY PROCEDURE TO hr;
 
BEGIN
    dbms_network_acl_admin.append_host_ace
         (host=>'127.0.0.1',
          ace => sys.xs$ace_type(privilege_list => sys.xs$name_list('JDWP'),
                                 principal_name => 'HR',
                                 principal_type => sys.xs_acl.ptype_db) );
END;




Managing Security for Definer's Rights and Invoker's Rights (Code Samples)
/************ The Complete Oracle PL/SQL Bootcamp **************
 * Author : Oracle Master Training                             *
 * Course : The Complete Oracle PL/SQL Bootcamp                *
 * Lecture: Managing Security for Definer's & Invoker's Rights *
 ***************************************************************/
 
-- TEMP_USER Worksheet Code
CREATE TABLE temp_table (temp_column VARCHAR2(100));
/
GRANT CREATE PROCEDURE, CREATE VIEW TO temp_user;
/
CREATE OR REPLACE PROCEDURE insert_into_temp_table (insert_value IN VARCHAR2) IS
BEGIN
    INSERT INTO temp_table VALUES (insert_value);
END;
/
GRANT EXECUTE ON insert_into_temp_table TO hr;
/
SELECT * FROM temp_table;
/
EXEC temp_user.insert_into_temp_table('User: TEMP_USER --> Procedure: Definer''s Rights');
/
CREATE OR REPLACE PROCEDURE insert_into_temp_table (insert_value IN VARCHAR2) AUTHID CURRENT_USER IS 
BEGIN
    INSERT INTO temp_table VALUES (insert_value);
END;
/
EXEC temp_user.insert_into_temp_table('User: TEMP_USER --> Procedure: Invoker''s Rights');
/
SELECT object_name,object_type,status FROM user_objects where object_name = 'INSERT_INTO_TEMP_TABLE';
DROP TABLE temp_table;
/
DROP PROCEDURE insert_into_temp_table;
/
CREATE TABLE temp_table2 (temp_column VARCHAR2(100));
INSERT INTO temp_table2 values('View Test: Temp Table in TEMP_USER');
/
CREATE OR REPLACE FUNCTION get_last_record_from_temp_table RETURN VARCHAR2 AUTHID CURRENT_USER IS
temp_text VARCHAR2(100);
BEGIN
    SELECT temp_column INTO temp_text FROM temp_table2 WHERE ROWNUM = 1;
    RETURN temp_text;
END;
/
CREATE OR REPLACE VIEW temp_view BEQUEATH DEFINER AS
    SELECT get_last_record_from_temp_table temp_text FROM dual;
/
GRANT SELECT ON temp_view TO HR;
/
CREATE OR REPLACE VIEW temp_view BEQUEATH CURRENT_USER AS
    SELECT get_last_record_from_temp_table temp_text FROM dual;
/
DROP VIEW temp_view;
DROP FUNCTION get_last_record_from_temp_table;
DROP TABLE temp_table2;
 
-- HR USER Worksheet Code:
CREATE TABLE temp_table (temp_column VARCHAR2(100));
INSERT INTO temp_user.temp_table VALUES ('User: HR --> Direct Insert - INSERT Privilege for Temp_user''s table: No');
EXEC temp_user.insert_into_temp_table('User: HR --> Procedure: Definer''s Rights - INSERT Privilege for Temp_user''s table: No');
SELECT * FROM temp_table;
SELECT * FROM temp_user.temp_table;
EXEC temp_user.insert_into_temp_table('User: HR --> Procedure: Invoker''s Rights - INSERT Privilege for Temp_user''s table: No');
DROP TABLE temp_table;
SELECT * FROM temp_user.temp_view;
SELECT * FROM temp_user.temp_table2;