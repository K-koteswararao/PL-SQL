--1)Retrieve the employee names in uppercase to standardize the reporting format.

SELECT UPPER(employee_name) AS employee_name_uppercase
FROM employees;

--2)Fetch employee first names in lowercase for email ID generation.

SELECT LOWER(first_name) AS first_name_lowercase
FROM employees;

--3)Display employee first names with only the first letter capitalized (Title Case):

SELECT INITCAP(first_name) AS first_name_title_case
FROM employees;

--4)Extract the first three letters of each employee’s first name:


SELECT SUBSTR(first_name, 1, 3) AS first_three_letters
FROM employees;

--5)Retrieve employees whose last names contain the letter "A":

SELECT employee_id, first_name, last_name
FROM employees
WHERE last_name LIKE '%A%';

--6)Replace 'Manager' with 'Lead' in the job title column:

UPDATE employees
SET job_title = REPLACE(job_title, 'Manager', 'Lead')
WHERE job_title LIKE '%Manager%';

--7)Retrieve employees hired in the last 6 months:


SELECT employee_id, first_name, last_name, hire_date
FROM employees
WHERE hire_date >= ADD_MONTHS(CURRENT_DATE, -6);

--8)Fetch the last working day of the current month:
SELECT 
    CASE
        WHEN TO_CHAR(LAST_DAY(SYSDATE), 'DY') IN ('SAT', 'SUN') THEN
            NEXT_DAY(LAST_DAY(SYSDATE) - 7, 'FRI')
        ELSE
            LAST_DAY(SYSDATE)
    END AS last_working_day
FROM dual;

--9)Find employees whose hire date falls on a Monday:

SELECT employee_id, first_name, last_name, hire_date
FROM employees
WHERE TO_CHAR(hire_date, 'DY') = 'MON';

--10)Calculate the number of months each employee has worked:

SELECT employee_id, first_name, last_name, hire_date, 
       FLOOR(MONTHS_BETWEEN(SYSDATE, hire_date)) AS months_worked
FROM employees;

--11)Retrieve employees' salary rounded to the nearest thousand:

SELECT employee_id, first_name, last_name, ROUND(salary, -3) AS rounded_salary
FROM employees;

--12)Find employees earning an odd salary amount:

SELECT employee_id, first_name, last_name, salary
FROM employees
WHERE MOD(salary, 2) = 1;

--13)Display the salary without decimal values:


SELECT employee_id, first_name, last_name, TRUNC(salary) AS truncated_salary
FROM employees;

--14)Show employee commission, but if NULL, display "No Commission":

SELECT employee_id, first_name, last_name, NVL(commission_pct, 'No Commission') AS commission
FROM employees;

--15)Display 'Eligible for Bonus' if the commission is not NULL:

SELECT employee_id, first_name, last_name, 
       NVL2(commission_pct, 'Eligible for Bonus', 'Not Eligible') AS bonus_status
FROM employees;

--16)Salary Range and Job Title Classification:
Classify employees based on their salary range:

SELECT employee_id, first_name, last_name, salary,
       CASE
           WHEN salary > 15000 THEN 'High Salary'
           WHEN salary BETWEEN 10000 AND 15000 THEN 'Medium Salary'
           ELSE 'Low Salary'
       END AS salary_category
FROM employees;

--17)Determine bonus eligibility based on job title:

SELECT employee_id, first_name, last_name, job_title, 
       CASE
           WHEN job_title = 'Manager' THEN salary * 0.20
           WHEN job_title = 'Sales' THEN salary * 0.15
           ELSE salary * 0.10
       END AS bonus
FROM employees;

--18)Experience Level and Commission Eligibility:
Display experience level of employees based on hire date:

SELECT employee_id, first_name, last_name, hire_date, 
       CASE
           WHEN hire_date < TO_DATE('01-JAN-2005', 'DD-MON-YYYY') THEN 'Senior Employee'
           WHEN hire_date BETWEEN TO_DATE('01-JAN-2005', 'DD-MON-YYYY') AND TO_DATE('31-DEC-2015', 'DD-MON-YYYY') THEN 'Mid-Level Employee'
           ELSE 'Junior Employee'
       END AS experience_level
FROM employees;

--19)Check if an employee is eligible for a commission:

SELECT employee_id, first_name, last_name, 
       CASE
           WHEN commission_pct IS NULL THEN 'No Commission'
           ELSE 'Eligible for Commission'
       END AS commission_status
FROM employees;

--20)Department Classification:
Classify employees based on department:

SELECT employee_id, first_name, last_name, department_id,
       CASE
           WHEN department_id = (SELECT department_id FROM departments WHERE department_name = 'IT') THEN 'Tech Team'
           WHEN department_id = (SELECT department_id FROM departments WHERE department_name = 'HR') THEN 'HR Team'
           ELSE 'Other Team'
       END AS department_team
FROM employees;

(---------------------------------------------------------------------------------------------------------------------)


--21)Retrieve all employee details:

SELECT * FROM employees;

--22)Fetch the first name, last name, and salary of all employees in descending order of salary:

SELECT first_name, last_name, salary
FROM employees
ORDER BY salary DESC;

--23)Get the department name and location of all departments:

SELECT department_name, location
FROM departments;

--24)Find the job titles available in the JOBS table:

SELECT job_title
FROM jobs;

--25)Fetch the details of employees whose salary is greater than $10,000:

SELECT *
FROM employees
WHERE salary > 10000;

--26)List employees whose first name starts with 'A':

SELECT employee_id, first_name, last_name
FROM employees
WHERE first_name LIKE 'A%';

--27)Retrieve employees who were hired after January 1, 2005:

SELECT employee_id, first_name, last_name, hire_date
FROM employees
WHERE hire_date > TO_DATE('01-JAN-2005', 'DD-MON-YYYY');

--28)Get the total number of employees in each department:

SELECT department_id, COUNT(*) AS total_employees
FROM employees
GROUP BY department_id;

--29)Calculate the average salary for each job title:

SELECT job_title, AVG(salary) AS average_salary
FROM employees
GROUP BY job_title;


--30)List departments that have more than 5 employees:

SELECT department_id, COUNT(*) AS employee_count
FROM employees
GROUP BY department_id
HAVING COUNT(*) > 5;

--31)Retrieve employee names along with their department names:

SELECT e.first_name || ' ' || e.last_name AS employee_name, d.department_name
FROM employees e
JOIN departments d ON e.department_id = d.department_id;

--32)Fetch employee names along with their job titles from the JOBS table:

SELECT e.first_name || ' ' || e.last_name AS employee_name, j.job_title
FROM employees e
JOIN jobs j ON e.job_id = j.job_id;

--33)Get a list of employees along with their manager’s name:

SELECT e.first_name || ' ' || e.last_name AS employee_name, 
       m.first_name || ' ' || m.last_name AS manager_name
FROM employees e
LEFT JOIN employees m ON e.manager_id = m.employee_id;

--34)Fetch employees along with their department and location:

SELECT e.first_name || ' ' || e.last_name AS employee_name, 
       d.department_name, d.location
FROM employees e
JOIN departments d ON e.department_id = d.department_id;

--35)Retrieve the department name for employees earning more than $12,000:

SELECT e.first_name || ' ' || e.last_name AS employee_name, d.department_name
FROM employees e
JOIN departments d ON e.department_id = d.department_id

--36)Retrieve the department name for employees earning more than $12,000:

SELECT e.first_name || ' ' || e.last_name AS employee_name, d.department_name
FROM employees e
JOIN departments d ON e.department_id = d.department_id
WHERE e.salary > 12000

--37)SELECT employee_id, first_name, last_name, salary
FROM employees
WHERE salary > (SELECT AVG(salary) FROM employees);


--38) Find employees who have the same salary as employee_id=101:

SELECT employee_id, first_name, last_name, salary
FROM employees
WHERE salary = (SELECT salary FROM employees WHERE employee_id = 101);


--39)Get the list of employees who work in the same department as employee_id=200:

SELECT employee_id, first_name, last_name, department_id
FROM employees
WHERE department_id = (SELECT department_id FROM employees WHERE employee_id = 200);

--40)Fetch the highest-paid employee details:

SELECT employee_id, first_name, last_name, salary
FROM employees
WHERE salary = (SELECT MAX(salary) FROM employees);

--41) List employees who earn less than the department’s average salary:

SELECT employee_id, first_name, last_name, salary, department_id
FROM employees e
WHERE salary < (SELECT AVG(salary)
                FROM employees
                WHERE department_id = e.department_id
group by salary);